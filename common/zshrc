export ZSH="$HOME/.oh-my-zsh"
export PATH="$PATH:/opt/local/bin:/opt/local/sbin"

### zsh & oh-my-zsh properties
# zsh
HISTSIZE=99999999
# oh-my-zsh
HIST_STAMPS="mm/dd/yyyy"
DISABLE_AUTO_TITLE="true"
export ZSH_COMPDUMP=$ZSH/cache/.zcompdump-$HOST
# 3rd party
ZSH_AUTOSUGGEST_STRATEGY=(history)

# PROMPT settings
git_info() {
  current_branch=`git branch --show-current` 2>/dev/null
  if [ $? -ne 0 ]; then
    return
  fi
  if [ -z $current_branch ]; then
    current_branch=`git branch -a | grep "*"`
    if [[ $current_branch == *"no branch"* ]]; then
      current_branch=`echo $current_branch | cut -d',' -f2 | sed 's/)//' | xargs`
    fi
  fi
  echo "%F{magenta}[%F{red}${current_branch}%F{magenta}]$reset_color "
}

k8s_info() {
  out="%F{white}( %F{blue}\u2638%b$reset_color %F{white}| "
  which kubectx > /dev/null
  if [ $? -ne 0 ]; then
    return
  fi
  kubectx -c > /dev/null 2>&1
  if [ $? -ne 0 ]; then
    return
  fi
  out="$out%F{cyan}`kubectx -c`"
  which kubens > /dev/null
  if [ $? -eq 0 ]; then
    out="$out:`kubens -c`"
  fi
  out="$out%F{white} ) "
  echo $out"$reset_color"
}

setopt PROMPT_SUBST
NEWLINE=$'\n'
# CUSTOM_NO_PROMPT="true"
if [ ! -z $CUSTOM_NO_PROMPT ]; then
  PROMPT='%#> '
else 
  PROMPT='%(?..[%?] )%F{green}%~$reset_color $(git_info)$reset_color$NEWLINE%#> '
fi

# plugins
# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
#
# For fzf:
# git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf
# ~/.fzf/install
plugins=(timer fzf)

source $ZSH/oh-my-zsh.sh
source $ZSH/custom/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
autoload -U compinit && compinit

######### keybindings #########
# go one directory back - ctrl + k
function up_widget() {
  BUFFER="cd .."
  zle accept-line
}
zle -N up_widget
bindkey "^u" up_widget

# go to home directory - ctrl + h
function goto_home() {
  BUFFER="cd ~/"$BUFFER
  zle end-of-line
  zle accept-line
}
zle -N goto_home
bindkey "^h" goto_home

# add to current BUFFER the sudo keyword
function add_sudo() {
  BUFFER="sudo "$BUFFER
  zle end-of-line
}
zle -N add_sudo
bindkey "^s" add_sudo

export VISUAL=nvim
autoload edit-command-line
bindkey "^v" edit-command-line

###### Print start time for each command
strlen () {
    FOO=$1
    local zero='%([BSUbfksu]|([FB]|){*})'
    LEN=${#${(S%%)FOO//$~zero/}}
    echo $LEN
}

# show right prompt with date ONLY when command is executed
preexec () {
    DATE=$( date +"[%H:%M:%S]" )
    local len_right=$( strlen "$DATE" )
    len_right=$(( $len_right+1 ))
    local right_start=$(($COLUMNS - $len_right))

    local len_cmd=$( strlen "$@" )
    local len_prompt=$(strlen "$PROMPT" )
    local len_left=$(($len_cmd+$len_prompt))

    RDATE="\033[${right_start}C ${DATE}"

		# this is printed one line after the command to be sure that it does not overwrite parts of the command
    echo -e "${RDATE}"
		# since "timer" zsh plugin is also used, create a new line to be sure that the elapsed time is not printed over the start time
		echo -e ""
}
###### Print start time for each command (END)

# personal settings - also could overwrite the PROMPT variable. Search for "PROMPT=" in your dotfiles
[ -f ~/.common_system ] && . ~/.common_system
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

## This is left here only for future debugging whenever needs to get the elapsed time for a part of a script. This is for iOS since it's using gdate (brew install coreutils)
# start=$(gdate +%s%N)
# YOUR COMMAND HERE
# end=$(gdate +%s%N)
# echo "Elapsed Time for TOOL: $(($(($end-$start))/1000000)) ms"
