#!/bin/bash

#### Commented because are exported in a more secure way
# # username that will be present in the commits done with the aliases generated below
# export git_username=
# # user email that will be present in the commits done with the aliases generated below
# export git_useremail=
# # github token used for triggering actions in github
# export GITHUB_TOKEN=
# # Jira credentials used for checking out a branch with the name of the given ticket
# export JIRA_USER=
# export JIRA_TOKEN=
# export JIRA_DOMAIN=
# export JIRA_AUTH_HEADER=

alias gd="git diff"
alias gs="git status"
alias gc="git commit -m"
alias ga="git add"
alias gch="git restore"
alias gchb="git checkout"

alias gc="git_commit"
alias gcw="git_commit"
alias gam="git_add_modified"
alias gstls="git stash list"
alias gstsh="git stash show -p"
alias gstst="git stash push"
alias gststa="git stash --include-untracked"
alias gstpo="git stash pop"

go_git_clean() {
  set -x
  gchm
  gpull
  git_clean_branches
  go mod tidy
  if [ $? -ne 0 ]; then
    go mod tidy -compat=1.17
  fi
  set +x
}
alias ggc=go_git_clean
gchm() {
  git checkout `git_get_master_branch`
}
gpull() {
  git pull origin `git_get_current_branch`
}
gpush() {
  extra_args=""
  if [ $# -gt 0 ]; then
    if [ "$1" = "f" ]; then
      extra_args="$extra_args --force-with-lease"
    fi
  fi
  branch_name=$(git_get_current_branch)

  setup_git_repo
  cmd="git push origin $branch_name$extra_args"
  echo "Command that will be executed:"
  printf "\t$cmd\n"

  printf "Do you want to continue? (y/n): "
  read input
  if [[ $input == "y" ]]; then
    eval $cmd
    return
  fi
  printf "$cmd" | pbcopy
  echo "PUSH ABORTED"
}
git_get_master_branch() {
  git branch -a  | egrep -e " master$" -e " main$" | sed 's/*//' | xargs
}

git_get_current_branch() {
  git branch -a  | egrep "^(\*)" | sed 's/*//' | xargs
}

git_clean_branches() {
  git fetch -p --tags
  for branch in `git branch -vv | egrep -v '[.*]' | grep -v "main" | grep -v "master" | grep -v "release" | awk '{print $1}'`; do
    git branch -D $branch
  done
}

gchbn() {
  project=""
  issue_id=`echo $1 | xargs`
  if [[ ! "$issue_id" =~ "${project}-" ]]; then
    issue_id="$project-$issue_id"
  fi
  issue_data=`curl --fail --request GET --url "https://${JIRA_DOMAIN}/rest/api/2/search?jql=id=$issue_id" --user "${JIRA_USER}:${JIRA_TOKEN}" --header 'Accept: application/json' --header "${JIRA_AUTH_HEADER}" | jq -r '.issues[0].fields | .issuetype.name, .summary'`
  if [ $? -ne 0 ]; then
    echo "Issue $issue_id not found"
    return 1
  fi
  type=$(echo "${issue_data}" | head -1 | awk '{print tolower($0)}')
  summary=$(echo "${issue_data}" | tail -1 | awk '{print tolower($0)}')
  branch_name=`echo "$issue_id $summary" | sed -e 's@-@ @g' -e 's@/@@g' -e 's@]@@g' -e 's@\[@@g' -e 's@\s\{2,\}@ @g' -e 's@ @-@g' -e 's@,@@g' -e 's@:@@g' | awk '{print tolower($0)}'`
  prefix="feat/"
  [ "$type" != "story" ] && prefix="fix/"
  branch_name="${prefix}${branch_name}"
  git checkout -b $branch_name
}

git_commit() {
  issue=$(git branch -a  | grep '*' | rev | cut -d'/' -f1 | rev)

  if [[ $issue = "master" ]]; then
    echo ""
    echo ""
    echo ""
    echo "!!!you are trying to commit on master!!!"
    echo ""
    echo ""
    echo ""
  fi
  setup_git_repo
  msg="$1"
  echo "Commit message:"
  printf "\t$msg\n"

  printf "Do you want to continue? (y/n): "
  read input
  if [[ $input == "y" ]]; then
    git commit -m "$msg"
    git_push
    return
  fi
  echo "COMMIT ABORTED"
}

git_push() {
  branch_name=$(git branch -a  | grep '*' | sed 's/^* //')

  setup_git_repo
  cmd="git push origin $branch_name"
  echo "Command that will be executed:"
  printf "\t$cmd\n"

  printf "Do you want to continue? (y/n): "
  read input
  if [[ $input == "y" ]]; then
    eval $cmd
    return
  fi
  printf "$cmd" | pbcopy
  echo "PUSH ABORTED"
}

git_add_modified() {
  git status | grep modified | cut -d':' -f2 | while read -r line; do
    if [[ "$line" == *.*js ]]; then
      echo "-> applying prettier format to $line"
      prettier.cjs $line --write
    fi
    git add $line
  done
}

setup_git_repo() {
#  git config user.name $git_username
#  git config user.email $git_useremail
}

