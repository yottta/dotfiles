#!/bin/bash

#### Commented because are exported in a more secure way
# # username that will be present in the commits done with the aliases generated below
# export git_username=
# # user email that will be present in the commits done with the aliases generated below
# export git_useremail=
# # github token used for triggering actions in github
# export GITHUB_TOKEN=
# # Jira credentials used for checking out a branch with the name of the given ticket
# export JIRA_USER=
# export JIRA_TOKEN=
# export JIRA_DOMAIN=
# export JIRA_AUTH_HEADER=

alias gd="git diff"
alias gs="git status"
alias gc="git commit -m"
alias ga="git add"
alias gch="git restore"
alias gchb="git checkout"

alias gc="git_commit"
alias gcw="git_commit"
alias gam="git_add_modified"
alias gstls="git stash list"
alias gstsh="git stash show -p"
alias gstst="git stash push"
alias gststa="git stash --include-untracked"
alias gstpo="git stash pop"
alias ggc=go_git_clean

go_git_clean() {
  set -x
  gchm
  gpull
  git_clean_branches
  if [ -f go.mod ]; then
    go mod tidy
    if [ $? -ne 0 ]; then
      go mod tidy -compat=1.17
    fi
  fi
  set +x
}
gchm() {
  git checkout "$(git_get_master_branch)" 
}

gpull() {
  git pull origin "$(git_get_current_branch)" 
}

gpush() {
  extra_args=""
  if [ $# -gt 0 ]; then
    if [ "$1" = "f" ]; then
      extra_args="$extra_args --force-with-lease"
    fi
  fi
  branch_name=$(git_get_current_branch)

  cmd="git push origin $branch_name$extra_args"
  echo "Command that will be executed:"
  printf "\t%s\n" "$cmd"

  printf "Do you want to continue? (y/n): "
  read -r input
  if [[ $input == "y" ]]; then
    eval "$cmd"
    return
  fi
  printf "%s" "$cmd" | pbcopy
  echo "PUSH ABORTED"
}
git_get_master_branch() {
  git branch -a  | grep -E -e " master$" -e " main$" | sed 's/*//' | xargs
}

git_get_current_branch() {
  git branch -a  | grep -E "^(\*)" | sed 's/*//' | xargs
}

git_clean_branches() {
  git fetch -p --tags
  for branch in $(git branch -vv | grep -E -v '[.*]' | grep -v "main" | grep -v "master" | grep -v "release" | awk '{print $1}'); do
    git branch -D "$branch"
  done
}

gchbn() {
  project=""
  issue_id=$(echo "$1" | xargs)
  if [[ ! "$issue_id" =~ ${project}\- ]]; then
    issue_id="$project-$issue_id"
  fi
  issue_data=$(curl --fail --request GET --url "https://${JIRA_DOMAIN}/rest/api/2/search?jql=id=$issue_id" --user "${JIRA_USER}:${JIRA_TOKEN}" --header 'Accept: application/json' --header "${JIRA_AUTH_HEADER}" | jq -r '.issues[0].fields | .issuetype.name, .summary')
  if [ $? -ne 0 ]; then
    echo "Issue $issue_id not found"
    return 1
  fi
  type=$(echo "${issue_data}" | head -1 | awk '{print tolower($0)}')
  summary=$(echo "${issue_data}" | tail -1 | awk '{print tolower($0)}')
  branch_name=$(echo "$issue_id $summary" | sed -e 's@-@ @g' -e 's@/@@g' -e 's@]@@g' -e 's@\[@@g' -e 's@\s\{2,\}@ @g' -e 's@ @-@g' -e 's@,@@g' -e 's@:@@g' | awk '{print tolower($0)}')
  prefix="feat/"
  [ "$type" != "story" ] && prefix="fix/"
  branch_name="${prefix}${branch_name}"
  git checkout -b "$branch_name"
}

git_commit() {
  issue=$(git branch -a  | grep '\*' | rev | cut -d'/' -f1 | rev)

  if [[ $issue = "master" ]]; then
    echo ""
    echo ""
    echo ""
    echo "!!!you are trying to commit on master!!!"
    echo ""
    echo ""
    echo ""
  fi
  msg="$1"
  cmd=$(printf 'git commit -s -m "%s"' "$msg")
  echo "Commit command:"
  printf "\t%s\n" "$cmd"

  printf "Do you want to continue? (y/n): "
  read -r input
  if [[ $input == "y" ]]; then
    eval "$cmd"
    git_push
    return
  fi
  echo "COMMIT ABORTED"
}

git_push() {
  branch_name=$(git branch -a  | grep '\*' | sed 's/^* //')

  cmd="git push origin $branch_name"
  echo "Command that will be executed:"
  printf "\t%s\n" "$cmd"

  printf "Do you want to continue? (y/n): "
  read -r input
  if [[ $input == "y" ]]; then
    eval "$cmd" 
    return
  fi
  printf "%s" "$cmd" | pbcopy 
  echo "PUSH ABORTED"
}

git_add_modified() {
  git status | grep modified | cut -d':' -f2 | while read -r line; do
    if [[ "$line" == *.*js ]]; then
      echo "-> applying prettier format to $line"
      prettier.cjs "$line" --write
    fi
    git add "$line"
  done
}

