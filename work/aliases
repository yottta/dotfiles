#!/bin/bash

#####-------------ALIASES------------#####
alias go_to_java_projects="cd $PROJECTS_PATH/liquidshare/java"
alias go_to_go_projects="cd $PROJECTS_PATH/liquidshare/go_modules"

# for mac os
alias ll="ls -lah"
alias l="ls -lh"
alias uuidgen="uuid_generator | tr '\n' ' ' | pbcopy"
alias docker_start_kafka="docker run -d --rm -p 2181:2181 -p 9092:9092 -e ADVERTISED_HOST=127.0.0.1 johnnypark/kafka-zookeeper"
alias docker_start_postgres="$PROJECTS_PATH/liquidshare/devops/scripts/postgres/postgres.sh"
alias docker_start_sourcegraph="docker run --publish 7080:7080 --publish 127.0.0.1:3370:3370 --rm --volume ~/.sourcegraph/config:/etc/sourcegraph --volume ~/.sourcegraph/data:/var/opt/sourcegraph sourcegraph/server:3.26.1"

ls_db_dump() {
  if [ $# -lt 2 ]; then
    echo "usage: ls_db_dump <env> <service_short_name, eg: uam/staticdata/accountmanagement>"
    return 1
  fi
  env=$1
  service=$2
  cd "$HOME/data/workspace/projects/ls/devops/utils/db_ssl_cert/${env}_sql_client_certificate"
  echo "using certificates from $(pwd)"
  output_file=$HOME/Downloads/db_exports/${service}-$(date +"%Y%m%d-%H%M%S").sql
  /Library/PostgreSQL/11/bin/pg_dump --verbose "host=localhost port=5433 user=ls_${service}_service_user dbname=ls sslrootcert=server-ca.pem sslcert=client-cert.pem sslkey=client-key.pem" -n ls_${service}_service --format=c -f $output_file
  echo "dumped done to $output_file"
}

patch_helm_secret() {
  printf "\t>> Patching $1 helm secret\n"
  allSecrets=$(kubectl get secret --sort-by=.metadata.creationTimestamp | grep sh.helm | grep $1)

  printf "\t>> Available $1 helm secrets:\n"
  echo "$allSecrets"
  echo ""

  target=$(echo "$allSecrets" | tail -1 | awk '{print $1}')
  printf "\t>> Going to patch '$target'. Agree? (y/n): "

  read input
  if [[ $input == "y" ]]; then
      kubectl patch secret $target -p '{"metadata":{"labels":{"status":"deployed"}}}'
      #content=$(kubectl get secret $target -oyaml | grep "release:" | cut -d':' -f2 | base64 -D | base64 -D | gunzip)
      return
  fi
  echo "\t>> PATCHING ABORTED!"
}

fix_generated_dir() {
    cd $(ll | grep service | grep -v proto | rev | cut -d' ' -f1 | rev)/src/main;
    test -e "generated"
    rm -rf generated;
    ln -s ../../build/generated .
    cd ../../../
}

setup_ssh_agent() {
  ssh-agent
  ssh-add $HOME/.ssh/id_rsa
}

go_to_live_project_env() {
  currentDir=$(pwd)
  prefix=$(echo "$currentDir" | cut -d'/' -f-10)
  suffix=$(echo "$currentDir" | cut -d'/' -f12-)
  env=$1
  cd $prefix/$env/$suffix
}

