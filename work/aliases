#!/bin/bash

#####-------------ALIASES------------#####
# for mac os
alias ll="ls -lah"
alias l="ls -lh"
alias docker_start_kafka="docker run -d --rm -p 2181:2181 -p 9092:9092 -e ADVERTISED_HOST=127.0.0.1 johnnypark/kafka-zookeeper"
alias docker_start_postgres="$PROJECTS_PATH/liquidshare/devops/scripts/postgres/postgres.sh"
alias docker_start_sourcegraph="docker run --publish 7080:7080 --publish 127.0.0.1:3370:3370 --rm --volume ~/.sourcegraph/config:/etc/sourcegraph --volume ~/.sourcegraph/data:/var/opt/sourcegraph sourcegraph/server:3.26.1"
alias vim=nvim

patch_helm_secret() {
  printf "\t>> Patching $1 helm secret\n"
  allSecrets=$(kubectl get secret --sort-by=.metadata.creationTimestamp | grep sh.helm | grep $1)

  printf "\t>> Available $1 helm secrets:\n"
  echo "$allSecrets"
  echo ""

  target=$(echo "$allSecrets" | tail -1 | awk '{print $1}')
  printf "\t>> Going to patch '$target'. Agree? (y/n): "

  read input
  if [[ $input == "y" ]]; then
      kubectl patch secret $target -p '{"metadata":{"labels":{"status":"deployed"}}}'
      return
  fi
  echo "\t>> PATCHING ABORTED!"
}

setup_ssh_agent() {
  ssh-agent
  ssh-add $HOME/.ssh/id_rsa
}

build_and_deploy_cloud_run() {
  test -d $HOME/.cloud_run_versions || mkdir $HOME/.cloud_run_versions
  set -x
  # env vars
  GCP_PROJECT=default-proj
  ARTIFACT_REG_REPO=default-repo
  project=`pwd`
  PROJ_NAME=`basename $project`
  test -f $project/.custom_cr_deployment && source $project/.custom_cr_deployment
  version="1.0.0"
  if [ -f $HOME/.cloud_run_versions/.$PROJ_NAME ]; then
    version=`echo $(cat $HOME/.$PROJ_NAME) | awk -F. '{print $1"."$2+1"."$3}'`
  fi
  echo "new version $version for $PROJ_NAME"
  docker build --platform linux/amd64 --build-arg github_token=$GITHUB_TOKEN -t europe-west1-docker.pkg.dev/$GCP_PROJECT/$ARTIFACT_REG_REPO/$PROJ_NAME:$version .
  newVersionSha=`docker push europe-west1-docker.pkg.dev/$GCP_PROJECT/$ARTIFACT_REG_REPO/$PROJ_NAME:$version | grep digest | cut -d' ' -f3`
  gcloud run deploy $PROJ_NAME --image=europe-west1-docker.pkg.dev/$GCP_PROJECT/$ARTIFACT_REG_REPO/$PROJ_NAME@$newVersionSha --region europe-west1
  echo $version > $HOME/.$PROJ_NAME
  set +x
}

# Functions to help with validating providers submission on https://github.com/opentofu/registry
# These functions are following the instructions from https://github.com/opentofu/registry/blob/main/PROCEDURES.md#user-complaint-the-provider-is-not-signed-with-a-valid-signing-key
gpg_cleanup() {
  printf "\t-> Cleanup old signatures\n"
  rm *SHA256SUMS*
  printf "\t-> Cleanup gpg keys\n"
  gpg --delete-keys $(gpg --list-keys | grep -A1 -e "^pub\s" | grep -ve "^pub\s" | grep -v "\-\-" | awk 'BEGIN{var=""}{var=var" "$1}END{print var}')
  printf "\t-> Cleanup submitted key\n"
  echo "" > submitted
}

gpg_import() {
  printf "\t-> Bring the downloaded signatures into the current directory\n"
  mv ~/Downloads/*SHA256* .
  sig_file=`ls -lah | grep ".sig" | awk '{print $9}'`
  sha_file=`ls -lah | grep "SHA256" | grep -v ".sig" | awk '{print $9}'`
  printf "\t-> Using $sig_file and $sha_file\n"
  printf "\t-> GPG Verify just to ensure that the verification is failing\n"
  gpg --verify "$sig_file" "$sha_file"
  printf "\t-> Import the submitted GPG key\n"
  gpg --import submitted > tmp 2>&1
  key_id=`cat tmp | grep key | cut -d ' ' -f3 | cut -d':' -f1`
  rm tmp
  printf "\t-> Edit the imported key: $key_id\n"
  gpg --edit-key $key_id
  printf "\t-> Verify with the imported GPG key\n"
  gpg --verify "$sig_file" "$sha_file"
}
